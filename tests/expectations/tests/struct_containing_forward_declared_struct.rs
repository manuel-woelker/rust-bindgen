/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct a {
    pub val_a: *mut a_b,
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct a_b {
    pub val_b: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_a_b() {
    assert_eq!(::std::mem::size_of::<a_b>() , 4usize);
    assert_eq! (::std::mem::align_of::<a_b>() , 4usize);
    assert_eq! (unsafe {
                & ( * ( 0 as * const a_b ) ) . val_b as * const _ as usize } ,
                0usize);
}
impl Clone for a_b {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_a() {
    assert_eq!(::std::mem::size_of::<a>() , 8usize);
    assert_eq! (::std::mem::align_of::<a>() , 8usize);
    assert_eq! (unsafe {
                & ( * ( 0 as * const a ) ) . val_a as * const _ as usize } ,
                0usize);
}
impl Clone for a {
    fn clone(&self) -> Self { *self }
}
impl Default for a {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
