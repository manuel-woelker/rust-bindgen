/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct C {
    pub m_member: ::std::os::raw::c_int,
    pub m_other: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_C() {
    assert_eq!(::std::mem::size_of::<C>() , 8usize);
    assert_eq!(::std::mem::align_of::<C>() , 4usize);
}
impl Clone for C {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct NonCopiable {
    pub m_member: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NonCopiable() {
    assert_eq!(::std::mem::size_of::<NonCopiable>() , 4usize);
    assert_eq!(::std::mem::align_of::<NonCopiable>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct NonCopiableWithNonCopiableMutableMember {
    pub m_member: NonCopiable,
}
#[test]
fn bindgen_test_layout_NonCopiableWithNonCopiableMutableMember() {
    assert_eq!(::std::mem::size_of::<NonCopiableWithNonCopiableMutableMember>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<NonCopiableWithNonCopiableMutableMember>()
               , 4usize);
}
