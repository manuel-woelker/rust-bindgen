/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct HasPrivate {
    pub mNotPrivate: ::std::os::raw::c_int,
    /** <div rustbindgen private></div> */
    mIsPrivate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HasPrivate() {
    assert_eq!(::std::mem::size_of::<HasPrivate>() , 8usize);
    assert_eq!(::std::mem::align_of::<HasPrivate>() , 4usize);
}
impl Clone for HasPrivate {
    fn clone(&self) -> Self { *self }
}
/** <div rustbindgen private></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct VeryPrivate {
    mIsPrivate: ::std::os::raw::c_int,
    mIsAlsoPrivate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VeryPrivate() {
    assert_eq!(::std::mem::size_of::<VeryPrivate>() , 8usize);
    assert_eq!(::std::mem::align_of::<VeryPrivate>() , 4usize);
}
impl Clone for VeryPrivate {
    fn clone(&self) -> Self { *self }
}
/** <div rustbindgen private></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct ContradictPrivate {
    /** <div rustbindgen private="false"></div> */
    pub mNotPrivate: ::std::os::raw::c_int,
    mIsPrivate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ContradictPrivate() {
    assert_eq!(::std::mem::size_of::<ContradictPrivate>() , 8usize);
    assert_eq!(::std::mem::align_of::<ContradictPrivate>() , 4usize);
}
impl Clone for ContradictPrivate {
    fn clone(&self) -> Self { *self }
}
