/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TestDouble {
    pub mMember: __BindgenComplex<f64>,
}
#[test]
fn bindgen_test_layout_TestDouble() {
    assert_eq!(::std::mem::size_of::<TestDouble>() , 16usize);
    assert_eq!(::std::mem::align_of::<TestDouble>() , 8usize);
}
impl Clone for TestDouble {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TestDoublePtr {
    pub mMember: *mut __BindgenComplex<f64>,
}
#[test]
fn bindgen_test_layout_TestDoublePtr() {
    assert_eq!(::std::mem::size_of::<TestDoublePtr>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestDoublePtr>() , 8usize);
}
impl Clone for TestDoublePtr {
    fn clone(&self) -> Self { *self }
}
impl Default for TestDoublePtr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TestFloat {
    pub mMember: __BindgenComplex<f32>,
}
#[test]
fn bindgen_test_layout_TestFloat() {
    assert_eq!(::std::mem::size_of::<TestFloat>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestFloat>() , 4usize);
}
impl Clone for TestFloat {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TestFloatPtr {
    pub mMember: *mut __BindgenComplex<f32>,
}
#[test]
fn bindgen_test_layout_TestFloatPtr() {
    assert_eq!(::std::mem::size_of::<TestFloatPtr>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestFloatPtr>() , 8usize);
}
impl Clone for TestFloatPtr {
    fn clone(&self) -> Self { *self }
}
impl Default for TestFloatPtr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
