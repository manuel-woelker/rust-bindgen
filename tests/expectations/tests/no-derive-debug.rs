/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]

#[repr(C)] #[derive(Copy, Clone, Default)] pub struct foo { bar: ::std::os::raw::c_int, }

/**
 * bar should compile. It will normally derive debug, but our blacklist of foo
 * and replacement for another type that doesn't implement it would prevent it
 * from building if --no-derive-debug didn't work.
 */
#[repr(C)]
#[derive(Default, Copy)]
pub struct bar {
    pub foo: foo,
    pub baz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bar() {
    assert_eq!(::std::mem::size_of::<bar>() , 8usize);
    assert_eq! (::std::mem::align_of::<bar>() , 4usize);
    assert_eq! (unsafe {
                & ( * ( 0 as * const bar ) ) . foo as * const _ as usize } ,
                0usize);
    assert_eq! (unsafe {
                & ( * ( 0 as * const bar ) ) . baz as * const _ as usize } ,
                4usize);
}
impl Clone for bar {
    fn clone(&self) -> Self { *self }
}
