/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct SomeAccessors {
    pub mNoAccessor: ::std::os::raw::c_int,
    /** <div rustbindgen accessor></div> */
    pub mBothAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="unsafe"></div> */
    pub mUnsafeAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="immutable"></div> */
    pub mImmutableAccessor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SomeAccessors() {
    assert_eq!(::std::mem::size_of::<SomeAccessors>() , 16usize);
    assert_eq!(::std::mem::align_of::<SomeAccessors>() , 4usize);
}
impl Clone for SomeAccessors {
    fn clone(&self) -> Self { *self }
}
impl SomeAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    #[inline]
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors(&self) -> &::std::os::raw::c_int {
        &self.mUnsafeAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mUnsafeAccessors
    }
    #[inline]
    pub fn get_mImmutableAccessor(&self) -> &::std::os::raw::c_int {
        &self.mImmutableAccessor
    }
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct AllAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    pub mAlsoBothAccessors: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AllAccessors() {
    assert_eq!(::std::mem::size_of::<AllAccessors>() , 8usize);
    assert_eq!(::std::mem::align_of::<AllAccessors>() , 4usize);
}
impl Clone for AllAccessors {
    fn clone(&self) -> Self { *self }
}
impl AllAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    #[inline]
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub fn get_mAlsoBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mAlsoBothAccessors
    }
    #[inline]
    pub fn get_mAlsoBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mAlsoBothAccessors
    }
}
/** <div rustbindgen accessor="unsafe"></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct AllUnsafeAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    pub mAlsoBothAccessors: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AllUnsafeAccessors() {
    assert_eq!(::std::mem::size_of::<AllUnsafeAccessors>() , 8usize);
    assert_eq!(::std::mem::align_of::<AllUnsafeAccessors>() , 4usize);
}
impl Clone for AllUnsafeAccessors {
    fn clone(&self) -> Self { *self }
}
impl AllUnsafeAccessors {
    #[inline]
    pub unsafe fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mAlsoBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mAlsoBothAccessors
    }
    #[inline]
    pub unsafe fn get_mAlsoBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mAlsoBothAccessors
    }
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct ContradictAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="false"></div> */
    pub mNoAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="unsafe"></div> */
    pub mUnsafeAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="immutable"></div> */
    pub mImmutableAccessor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ContradictAccessors() {
    assert_eq!(::std::mem::size_of::<ContradictAccessors>() , 16usize);
    assert_eq!(::std::mem::align_of::<ContradictAccessors>() , 4usize);
}
impl Clone for ContradictAccessors {
    fn clone(&self) -> Self { *self }
}
impl ContradictAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    #[inline]
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors(&self) -> &::std::os::raw::c_int {
        &self.mUnsafeAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mUnsafeAccessors
    }
    #[inline]
    pub fn get_mImmutableAccessor(&self) -> &::std::os::raw::c_int {
        &self.mImmutableAccessor
    }
}
/** <div rustbindgen accessor replaces="Replaced"></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct Replaced {
    pub mAccessor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Replaced() {
    assert_eq!(::std::mem::size_of::<Replaced>() , 4usize);
    assert_eq!(::std::mem::align_of::<Replaced>() , 4usize);
}
impl Clone for Replaced {
    fn clone(&self) -> Self { *self }
}
impl Replaced {
    #[inline]
    pub fn get_mAccessor(&self) -> &::std::os::raw::c_int { &self.mAccessor }
    #[inline]
    pub fn get_mAccessor_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mAccessor
    }
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct Wrapper {
    pub mReplaced: Replaced,
}
#[test]
fn bindgen_test_layout_Wrapper() {
    assert_eq!(::std::mem::size_of::<Wrapper>() , 4usize);
    assert_eq!(::std::mem::align_of::<Wrapper>() , 4usize);
}
impl Clone for Wrapper {
    fn clone(&self) -> Self { *self }
}
impl Wrapper {
    #[inline]
    pub fn get_mReplaced(&self) -> &Replaced { &self.mReplaced }
    #[inline]
    pub fn get_mReplaced_mut(&mut self) -> &mut Replaced {
        &mut self.mReplaced
    }
}
