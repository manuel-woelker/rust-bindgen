/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct whatever {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_whatever() {
    assert_eq!(::std::mem::size_of::<whatever>() , 1usize);
    assert_eq!(::std::mem::align_of::<whatever>() , 1usize);
}
impl Clone for whatever {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct whatever_child {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_whatever_child() {
    assert_eq!(::std::mem::size_of::<whatever_child>() , 1usize);
    assert_eq!(::std::mem::align_of::<whatever_child>() , 1usize);
}
impl Clone for whatever_child {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct whatever_child_with_member {
    pub m_member: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_whatever_child_with_member() {
    assert_eq!(::std::mem::size_of::<whatever_child_with_member>() , 4usize);
    assert_eq!(::std::mem::align_of::<whatever_child_with_member>() , 4usize);
}
impl Clone for whatever_child_with_member {
    fn clone(&self) -> Self { *self }
}
