/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod foo {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Default, Copy)]
        pub struct Bar {
            pub foo: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy)]
        pub struct Bar_Baz {
            pub foo: ::std::os::raw::c_int,
        }
        #[test]
        fn bindgen_test_layout_Bar_Baz() {
            assert_eq!(::std::mem::size_of::<Bar_Baz>() , 4usize);
            assert_eq!(::std::mem::align_of::<Bar_Baz>() , 4usize);
        }
        impl Clone for Bar_Baz {
            fn clone(&self) -> Self { *self }
        }
        #[test]
        fn bindgen_test_layout_Bar() {
            assert_eq!(::std::mem::size_of::<Bar>() , 4usize);
            assert_eq!(::std::mem::align_of::<Bar>() , 4usize);
        }
        impl Clone for Bar {
            fn clone(&self) -> Self { *self }
        }
        #[repr(C)]
        #[derive(Debug, Default, Copy)]
        pub struct Baz {
            pub baz: ::std::os::raw::c_int,
        }
        #[test]
        fn bindgen_test_layout_Baz() {
            assert_eq!(::std::mem::size_of::<Baz>() , 4usize);
            assert_eq!(::std::mem::align_of::<Baz>() , 4usize);
        }
        impl Clone for Baz {
            fn clone(&self) -> Self { *self }
        }
    }
}
